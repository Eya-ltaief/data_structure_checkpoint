ALGORITHM distinct_elements 
VAR
    // declaring 2 sets of arrays
    tab1 : ARRAY_OF INTEGER[4];
    tab2 : ARRAY_OF INTEGER[5];
    // declaring 2 hashing tables
    htab1 : HASH_TABLE<INTEGER,INTEGER>;
    htab2 : HASH_TABLE<INTEGER,INTEGER>;
    // declaring the variables of counts
    sum :INTEGER:= 0
    count :INTEGER:= 0
    // declaring the incrementors
    i : INTEGER;
    j : INTEGER;
BEGIN
    // first method of finding the sum of distinct elements
    // filling in the tables
    FOR i FROM 0 TO 3 STEP 1  DO   
        Read(tab1[i]) 
    END_FOR
    FOR j FROM 0 TO 4 STEP 1  DO   
        Read(tab2[j]) 
    END_FOR
    FOR i FROM 0 TO tab1.length-1 STEP 1  DO 
    FOR j FROM 0 TO tab2.length-1 STEP 1  DO
    IF (tab1[i] <> tab2[j]) THEN
        sum = tab1[i]+tab2[j]
    END_IF
        write(sum)
    END_FOR
    END_FOR
    // second method of finding the sum of distinct elements
    FOR i FROM 0 TO tab1.length -1 STEP 1  DO
    FOR j FROM 0 TO tab2.length -1 STEP 1  DO
        IF (htab1.lookup(tab1[i]) <> htab2.lookup(tab2[j])) THEN
            count := htab1.get(tab1[i])+htab2.get(tab2[j]);
        ELSE
            BREAK;
        END_IF
        Write(count);
    END_FOR
    END_FOR
    // calculating the sum of overlapping elements
    FOR i FROM 0 TO 3 STEP 1  DO   
        Read(tab1[i]) 
    END_FOR
    FOR j FROM 0 TO 4 STEP 1  DO   
        Read(tab2[j]) 
    END_FOR
    FOR i FROM 0 TO tab1.length-1 STEP 1  DO 
    FOR j FROM 0 TO tab2.length-1 STEP 1  DO
    IF (tab1[i] == tab2[j]) THEN
        sum = tab1[i]+tab2[j]
    END_IF
        write(sum)
    END_FOR
    END_FOR

END